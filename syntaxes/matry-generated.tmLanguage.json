{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Matry",
  "scopeName": "source.matry",
  "fileTypes": [
    "matry"
  ],
  "patterns": [
    {
      "name": "comment.line.double-slash",
      "match": "//.*"
    },
    {
      "name": "comment.block",
      "begin": "/\\*",
      "end": "\\*/"
    },
    {
      "include": "#tokens_block"
    },
    {
      "include": "#component_block"
    },
    {
      "include": "#story_block"
    }
  ],
  "repository": {
    "tokens_block": {
      "patterns": [
        {
          "name": "keyword",
          "begin": "^tokens\\b",
          "end": "}",
          "patterns": [
            {
              "name": "entity.other.attribute-name",
              "match": "([a-z|A-Z|0-9]+)(?=\\s*{)"
            },
            {
              "name": "invalid",
              "match": "howdy"
            },
            {
              "include": "#token_properties"
            },
            {
              "begin": "\\b([a-z|A-Z|0-9]+)(?=\\s*{)",
              "end": "}",
              "patterns": [
                {
                  "include": "#token_properties"
                }
              ]
            }
          ]
        }
      ]
    },
    "token_properties": {
      "patterns": [
        {
          "name": "punctuation",
          "match": ":"
        },
        {
          "name": "variable.parameter",
          "match": "\\b[a-zA-Z][a-zA-Z0-9_-]*[a-zA-Z0-9](?=\\s*:)"
        },
        {
          "include": "#style_values"
        }
      ]
    },
    "story_block": {
      "patterns": [
        {
          "name": "keyword",
          "begin": "^story\\b",
          "end": "}",
          "patterns": [
            {
              "name": "entity.other.attribute-name",
              "match": "(?<=^story)(\\s+)(.*)$"
            },
            {
              "name": "keyword",
              "begin": "^\\s*frame\\b",
              "end": "}",
              "patterns": [
                {
                  "include": "#frame_block"
                }
              ]
            }
          ]
        }
      ]
    },
    "frame_block": {
      "patterns": [
        {
          "name": "entity.other.attribute-name",
          "begin": "(?<=^\\s*frame)(\\s+)(.*)$",
          "end": "}",
          "patterns": [
            {
              "include": "#frame_properties"
            }
          ]
        }
      ]
    },
    "frame_properties": {
      "patterns": [
        {
          "name": "variable.parameter",
          "match": "\\b[a-zA-Z][a-zA-Z0-9_-]*[a-zA-Z0-9](?=\\s*:)"
        },
        {
          "name": "punctuation",
          "match": ":"
        },
        {
          "include": "#style_values"
        },
        {
          "include": "#frame_block"
        }
      ]
    },
    "component_block": {
      "patterns": [
        {
          "name": "keyword",
          "begin": "^component\\b",
          "end": "\\}",
          "patterns": [
            {
              "begin": "^\\s*(style)\\s*([a-z|A-Z|0-9|_-]+)\\s*(when)?\\s*(\\$[a-z|A-Z|0-9|_-]+)?",
              "end": "\\}",
              "captures": {
                "1": {
                  "name": "keyword"
                },
                "2": {
                  "name": "entity.other.attribute-name"
                },
                "3": {
                  "name": "keyword.control.conditional"
                },
                "4": {
                  "name": "variable.parameter"
                }
              },
              "patterns": [
                {
                  "include": "#conditional_style_block"
                },
                {
                  "include": "#component_style_block"
                }
              ]
            },
            {
              "name": "entity.other.attribute-name",
              "match": "([a-z|A-Z|0-9|_-]+)(?=\\s*{)"
            },
            {
              "name": "keyword",
              "begin": "^\\s*elements\\s*{",
              "end": "}",
              "patterns": [
                {
                  "include": "#elements_block"
                }
              ]
            },
            {
              "include": "#variants_block"
            }
          ]
        }
      ]
    },
    "elements_block": {
      "patterns": [
        {
          "match": "^\\s*(shape|image|video|text|any|svg)\\s+([a-z|A-Z|0-9|_-]+)",
          "captures": {
            "1": {
              "name": "support.type"
            },
            "2": {
              "name": "entity.other.attribute-name"
            }
          }
        },
        {
          "begin": "{",
          "end": "}",
          "patterns": [
            {
              "include": "#elements_block"
            }
          ]
        }
      ]
    },
    "element_definition": {
      "patterns": [
        {
          "include": "#elements_block"
        }
      ]
    },
    "variants_block": {
      "patterns": [
        {
          "name": "keyword",
          "begin": "^\\s*(variants)\\b",
          "end": "\\}",
          "patterns": [
            {
              "include": "#style_types"
            },
            {
              "name": "variable.parameter",
              "match": "\\b[a-zA-Z][a-zA-Z0-9_-]*[a-zA-Z0-9](?=\\s*:)"
            },
            {
              "include": "#style_values"
            }
          ]
        }
      ]
    },
    "component_style_block": {
      "patterns": [
        {
          "include": "#style_properties"
        },
        {
          "include": "#style_values"
        }
      ]
    },
    "conditional_style_block": {
      "patterns": [
        {
          "begin": "^\\s*(is)\\s*(\\w+)",
          "end": "\\}",
          "captures": {
            "1": {
              "name": "keyword.control"
            },
            "2": {
              "name": "string.other"
            }
          },
          "patterns": [
            {
              "include": "#component_style_block"
            }
          ]
        }
      ]
    },
    "style_types": {
      "patterns": [
        {
          "name": "support.type",
          "match": "^\\s*(color|text|asset|dimension|toggle|switch)\\b"
        }
      ]
    },
    "style_properties": {
      "patterns": [
        {
          "name": "support.type.property-name.css",
          "match": "(align-content|align-items|align-self|all|animation|animation-delay|animation-direction|animation-duration|animation-fill-mode|animation-iteration-count|animation-name|animation-play-state|animation-timing-function|backdrop-filter|backface-visibility|background|background-attachment|background-blend-mode|background-clip|background-color|background-image|background-origin|background-position|background-repeat|background-size|border|border-bottom|border-bottom-color|border-bottom-left-radius|border-bottom-right-radius|border-bottom-style|border-bottom-width|border-collapse|border-color|border-image|border-image-outset|border-image-repeat|border-image-slice|border-image-source|border-image-width|border-left|border-left-color|border-left-style|border-left-width|border-radius|border-right|border-right-color|border-right-style|border-right-width|border-spacing|border-style|border-top|border-top-color|border-top-left-radius|border-top-right-radius|border-top-style|border-top-width|border-width|bottom|box-decoration-break|box-shadow|box-sizing|break-after|break-before|break-inside|caption-side|caret-color|charset|clear|clip|clip-path|color|column-count|column-fill|column-gap|column-rule|column-rule-color|column-rule-style|column-rule-width|column-span|column-width|columns|content|counter-increment|counter-reset|cursor|direction|display|empty-cells|filter|flex|flex-basis|flex-direction|flex-flow|flex-grow|flex-shrink|flex-wrap|float|font|font-display|font-family|font-feature-settings|font-kerning|font-size|font-size-adjust|font-stretch|font-style|font-variant|font-variant-caps|font-variant-east-asian|font-variant-ligatures|font-variant-numeric|font-variant-position|font-weight|gap|grid|grid-area|grid-auto-columns|grid-auto-flow|grid-auto-rows|grid-column|grid-column-end|grid-column-start|grid-gap|grid-row|grid-row-end|grid-row-start|grid-template|grid-template-areas|grid-template-columns|grid-template-rows|hanging-punctuation|height|hyphens|image-orientation|image-rendering|image-set|inherit|initial|inline-size|isolation|justify-content|justify-items|justify-self|left|letter-spacing|line-break|line-height|list-style|list-style-image|list-style-position|list-style-type|margin|margin-bottom|margin-left|margin-right|margin-top|mask|mask-clip|mask-composite|mask-image|mask-mode|mask-origin|mask-position|mask-repeat|mask-size|mask-type|max-height|max-width|min-height|min-width|mix-blend-mode|object-fit|object-position|opacity|order|outline|outline-color|outline-offset|outline-style|outline-width|overflow|overflow-anchor|overflow-wrap|overflow-x|overflow-y|padding|padding-bottom|padding-left|padding-right|padding-top|page-break-after|page-break-before|page-break-inside|perspective|perspective-origin|place-content|place-items|place-self|pointer-events|position|quotes|resize|revert|right|rotate|row-gap|scale|scroll-behavior|scroll-margin|scroll-margin-bottom|scroll-margin-left|scroll-margin-right|scroll-margin-top|scroll-padding|scroll-padding-bottom|scroll-padding-left|scroll-padding-right|scroll-padding-top|scroll-snap-align|scroll-snap-stop|scroll-snap-type|shape-image-threshold|shape-margin|shape-outside|tab-size|table-layout|text-align|text-align-last|text-combine-upright|text-decoration|text-decoration-color|text-decoration-line|text-decoration-skip|text-decoration-skip-ink|text-decoration-style|text-decoration-thickness|text-indent|text-justify|text-orientation|text-overflow|text-rendering|text-shadow|text-transform|text-underline-offset|text-underline-position|top|transform|transform-box|transform-origin|transform-style|transition|transition-delay|transition-duration|transition-property|transition-timing-function|translate|unicode-bidi|unset|vertical-align|visibility|white-space|width|will-change|word-break|word-spacing|word-wrap|writing-mode|z-index)(?=\\s*:)"
        }
      ]
    },
    "style_values": {
      "patterns": [
        {
          "begin": "(?<=: +)(\\w+(\\*)?)(\\s*)?(?=,)",
          "end": "(\\n)",
          "beginCaptures": {
            "1": {
              "name": "string.other"
            },
            "2": {
              "name": "entity"
            }
          },
          "patterns": [
            {
              "match": "\\s*(,)\\s*(\\w+(\\*)?)",
              "captures": {
                "1": {
                  "name": "markup.punctuation.list.beginning"
                },
                "2": {
                  "name": "string.other"
                },
                "3": {
                  "name": "entity.name.function"
                }
              }
            }
          ]
        },
        {
          "name": "meta.property-value",
          "match": "(?<=: +)\\$[a-zA-Z_][a-zA-Z0-9_-]*"
        },
        {
          "name": "string.unquoted.other",
          "comment": "absolute path for an asset file",
          "match": "/[\\w\\s\\.-]+(/[\\w\\s\\.-]+)*"
        },
        {
          "name": "constant.numeric",
          "comment": "any dimension",
          "match": "\\d+(\\.\\d+)?(px|em|rem|%|vw|vh|vmin|vmax|cm|mm|in|pt|pc)"
        },
        {
          "name": "constant.numeric",
          "comment": "hex colors",
          "match": "#[0-9a-fA-F]{3,4}([0-9a-fA-F]{2}){0,2}"
        },
        {
          "name": "constant.numeric",
          "comment": "any number",
          "match": "\\d+(\\.\\d+)?"
        },
        {
          "name": "constant.numeric",
          "comment": "rgb colors",
          "match": "rgb\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}\\s*,\\s*\\d{1,3}\\s*\\)|rgba\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}\\s*,\\s*\\d{1,3}\\s*,\\s*(?:1|0(?:\\.\\d+)?)\\s*\\)"
        },
        {
          "name": "constant.numeric",
          "match": "hsla?\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*(,\\s*(?:\\d+(?:\\.\\d+)?|\\.\\d+)(%?)\\s*)?\\)"
        },
        {
          "name": "keyword.operator",
          "comment": "catch-all for text",
          "match": "(?<=toggle\\s+[a-zA-Z][a-zA-Z0-9_-]*[a-zA-Z0-9]\\s*:\\s*)(on|off)"
        },
        {
          "name": "string.quoted.double",
          "comment": "catch-all for text",
          "match": "(?<=text\\s+[a-zA-Z][a-zA-Z0-9_-]*[a-zA-Z0-9]\\s*:\\s*).+$"
        }
      ]
    }
  }
}